# Define the key bindings in this file
from libqtile.lazy import lazy
from libqtile.config import Key, KeyChord
#from groups import groups
#from variables import variables

my_terminal = 'alacritty'
my_browser1 = 'brave'
my_browser2 = 'chromium'
my_browser3 = 'firefox'
my_file_manager = 'thunar'
my_mail_client = 'thunderbird'
mod = 'mod4'

keys = [
    # The essentials
    #Key([mod], "Return", lazy.spawn(my_terminal), desc="Terminal"),
    #Key([mod, "shift"], "Return", lazy.spawn("rofi -show drun"), desc='Run Launcher'),
    #Key([mod], "F1", lazy.spawn(my_browser1), desc="Web browser"),
    #Key([mod], "F2", lazy.spawn(my_browser2), desc="Web browser"),
    #Key([mod], "F3", lazy.spawn(my_file_manager), desc="File manager"),
    #Key([mod, "shift"], "F3", lazy.spawn(my_terminal + " --class ranger -e ranger"), desc="Ranger file manager"),
    #Key([mod], "F4", lazy.spawn("vlc"), desc="vlc"),
    #Key([mod], "F5", lazy.spawn("libreoffice --calc PersonalHome/Lavoro/PizzaExpress/WorkingHours_2024.ods"), desc="Working hours"),
    #Key([mod], "F6", lazy.spawn(my_mail_client), desc="mail client"),
    #Key([mod], "F7", lazy.spawn(my_browser3), desc="Web browser"),
    #Key([mod], "c", lazy.spawn("gsimplecal"), desc="Calendar"),

    #Key([mod], "p", lazy.spawn("passmenu -l 15"), desc="Passmenu"),
    #Key([mod, "shift"], "p", lazy.spawn("qtpass"), desc="Pass gui app"),

    #Key([mod], "w", lazy.spawn("rofi -show window -show-icons"), desc="Opened windows"),
    #Key([mod], "d", lazy.spawn("rofi -no-config -no-lazy-grab -show drun -modi drun -theme .config/qtile/rofi/launcher2.rasi"), desc="Opened windows"),
    
    #Key([mod], "0", lazy.spawn("arcolinux-powermenu"), desc="Power menu"),






    #Key([mod], "b", lazy.spawn(my_browser), desc='Web browser'),
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod, "shift"], "c", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift"], "r", lazy.reload_config(), desc="Reload the config"),
    #Key([mod, "shift"], "q", lazy.spawn("dm-logout -r"), desc="Logout menu"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    
    # Switch between windows
    # Some layouts like 'monadtall' only need to use j/k to move
    # through the stack, but other layouts like 'columns' will
    # require all four directions h/j/k/l to move around.
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),

    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h",
        lazy.layout.shuffle_left(),
        lazy.layout.move_left().when(layout=["treetab"]),
        desc="Move window to the left/move tab left in treetab"),

    Key([mod, "shift"], "l",
        lazy.layout.shuffle_right(),
        lazy.layout.move_right().when(layout=["treetab"]),
        desc="Move window to the right/move tab right in treetab"),

    Key([mod, "shift"], "j",
        lazy.layout.shuffle_down(),
        lazy.layout.section_down().when(layout=["treetab"]),
        desc="Move window down/move down a section in treetab"
    ),
    Key([mod, "shift"], "k",
        lazy.layout.shuffle_up(),
        lazy.layout.section_up().when(layout=["treetab"]),
        desc="Move window downup/move up a section in treetab"
    ),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "space", lazy.layout.toggle_split(), desc="Toggle between split and unsplit sides of stack"),

    # Treetab prompt
    # Key([variables.mod, "shift"], "a", add_treetab_section, desc='Prompt to add new section in treetab'),

    # Grow/shrink windows left/right. 
    # This is mainly for the 'monadtall' and 'monadwide' layouts
    # although it does also work in the 'bsp' and 'columns' layouts.
    Key([mod], "equal",
        lazy.layout.grow_left().when(layout=["bsp", "columns"]),
        lazy.layout.grow().when(layout=["monadtall", "monadwide"]),
        desc="Grow window to the left"
    ),
    Key([mod], "minus",
        lazy.layout.grow_right().when(layout=["bsp", "columns"]),
        lazy.layout.shrink().when(layout=["monadtall", "monadwide"]),
        desc="Grow window to the left"
    ),

    # Grow windows up, down, left, right.  Only works in certain layouts.
    # Works in 'bsp' and 'columns' layout.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    Key([mod], "m", lazy.layout.maximize(), desc='Toggle between min and max sizes'),
    Key([mod], "t", lazy.window.toggle_floating(), desc='toggle floating'),
    # Key([variables.mod], "f", maximize_by_switching_layout(), lazy.window.toggle_fullscreen(), desc='toggle fullscreen'),
    # Key([variables.mod, "shift"], "m", minimize_all(), desc="Toggle hide/show all windows on current group"),

    # Switch focus of monitors
    Key([mod], "period", lazy.next_screen(), desc='Move focus to next monitor'),
    Key([mod], "comma", lazy.prev_screen(), desc='Move focus to prev monitor'),

  # Dmenu/rofi scripts launched using the key chord SUPER+p followed by 'key'
  #  KeyChord([mod], "p", [
  #      Key([], "h", lazy.spawn("dm-hub -r"), desc='List all dmscripts'),
  #      Key([], "a", lazy.spawn("dm-sounds -r"), desc='Choose ambient sound'),
  #      Key([], "b", lazy.spawn("dm-setbg -r"), desc='Set background'),
  #      Key([], "c", lazy.spawn("dtos-colorscheme -r"), desc='Choose color scheme'),
  #      Key([], "e", lazy.spawn("dm-confedit -r"), desc='Choose a config file to edit'),
  #      Key([], "i", lazy.spawn("dm-maim -r"), desc='Take a screenshot'),
  #      Key([], "k", lazy.spawn("dm-kill -r"), desc='Kill processes '),
  #      Key([], "m", lazy.spawn("dm-man -r"), desc='View manpages'),
  #      Key([], "n", lazy.spawn("dm-note -r"), desc='Store and copy notes'),
  #      Key([], "o", lazy.spawn("dm-bookman -r"), desc='Browser bookmarks'),
  #      Key([], "p", lazy.spawn("rofi-pass"), desc='Logout menu'),
  #      Key([], "q", lazy.spawn("dm-logout -r"), desc='Logout menu'),
  #      Key([], "r", lazy.spawn("dm-radio -r"), desc='Listen to online radio'),
  #      Key([], "s", lazy.spawn("dm-websearch -r"), desc='Search various engines'),
  #      Key([], "t", lazy.spawn("dm-translate -r"), desc='Translate text')
  #  ])
]
